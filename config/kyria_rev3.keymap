#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#if CONFIG_WIRELESS
    #include <dt-bindings/zmk/bt.h>
    #define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#else
    #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif

#define HOST_OS 2

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_50keys.h"
#include "../zmk-nodefree-config/international_chars/greek.dtsi"
#include "../zmk-nodefree-config/international_chars/german.dtsi"

#define DEF 0
#define SYM 1
#define NAV 2
#define FN 3
#define NUM 4
#define SYS 5
#define MOUSE 6
#define QWERTY 7

#include "extra_keys.h"
#include "mouse.dtsi"

#define XXX &none
#define ___ &trans

/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Unicode characters */
ZMK_UNICODE_PAIR(no_ae,      KP_N0, KP_N2, KP_N3, KP_N0,    KP_N0, KP_N1, KP_N9, KP_N8)
ZMK_UNICODE_PAIR(no_oe,      KP_N0, KP_N2, KP_N4, KP_N8,    KP_N0, KP_N2, KP_N1, KP_N6)
ZMK_UNICODE_PAIR(no_aa,      KP_N0, KP_N2, KP_N2, KP_N9,    KP_N0, KP_N1, KP_N9, KP_N7)
ZMK_UNICODE_SINGLE(euro,     KP_N0, KP_N1, KP_N2, KP_N8)


/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH4 LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3 RH4 LF1 LF0 RF0 RF1                  // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

/* Nav cluster */

// long-tap action on hold, short-tap action on all interrupts
#define MT_CORE \
    flavor = "tap-preferred"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <220>; \
    hold-trigger-key-positions = <0>;

&mt { MT_CORE };
ZMK_BEHAVIOR(mt_home, hold_tap, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_BEHAVIOR(mt_end,  hold_tap,  bindings = <&masked_end>, <&kp>; MT_CORE)

#define NAV_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
#define NAV_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
#define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
#define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
#define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
#define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

// mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        bindings = <BINDING>, <BINDING>; \
        mods = <MODS>; \
    )
MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUM 0
ZMK_BEHAVIOR(smart_num, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_BEHAVIOR(num_dance, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
)
&num_word {  // num-word, requires PR #1451
    layers = <NUM>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
};

// tap: toggle nav-layer | hold: go to num-layer
ZMK_BEHAVIOR(to_nav, tap_dance,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo NAV>, <&tog NAV>;
)

// smart-mouse, requires PR #1366
ZMK_BEHAVIOR(smart_mouse, tri_state,
    bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
    ignored-key-positions = <LT1 LT3 RT1 RT2 RT3 RM1 RM2 RM3 RH0 RH1>;
    ignored-layers = <MOUSE>;
)

/* Custom behaviors */

// Alt+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    ignored-key-positions = <LT2>;
)

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// tap: qmark | shift + tap: excl
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)

// tap: left/right parenthesis | shft + tap: less-than/greater-than
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)

// tap: space | shift + tap: dot -> space -> sticky shift | hold: activate layer
ZMK_BEHAVIOR(lt_spc, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&spc_morph>;
)
SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc)
ZMK_BEHAVIOR(dot_spc, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)

// tap: backspace | lshft + tap: delete | rshft + tap: shift-delete
ZMK_BEHAVIOR(bs_del, mod_morph,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    keep-mods = <MOD_RSFT>;
)

// tap: copy | double-tap: cut
ZMK_BEHAVIOR(copy_cut, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&kp LC(INS)>, <&kp LC(X)>;
)

// Windows sleep key
ZMK_BEHAVIOR(win_sleep, macro,
    wait-ms = <500>;
    tap-ms = <50>;
    bindings = <&kp LG(X) &kp U &kp S>;
)

// misc aliases
#define CANCEL      &kp K_CANCEL             // cancel caps-word, num-word and smart-mouse
#define DSK_PREV    &hmr RSHFT LG(LC(LEFT))  // previous desktop
#define DSK_NEXT    &hmr LALT LG(LC(RIGHT))  // next     desktop
#define PIN_WIN     &kp LG(LC(LS(Q)))        // pin window across desktops
#define PIN_APP     &kp LG(LC(LS(A)))        // pin application across desktops
#define DSK_MGR     &kp LA(GRAVE)            // desktop manager
#define VOL_DOWN    &hmr LCTRL C_VOL_DN

/* Keymap */

ZMK_CONDITIONAL_LAYER(FN NUM, SYS)  // FN + NUM --> SYS

ZMK_LAYER(base_layer,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &kp ESC        &kp Q         &kp W         &kp F         &kp P         &kp B                                                                       &kp J         &kp L         &kp U         &kp Y       &no_aa         &no_ae
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &kp TAB     &hml LGUI A   &hml LALT R   &hml LCTRL S  &hml LSHFT T     &kp G                                                                       &kp M      &hmr RSHFT N  &hmr LCTRL E  &hmr LALT I   &hmr LGUI O     &no_oe
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮     ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
       &to 0         &kp Z         &kp X         &kp C      &lt SYM D        &kp V         ___           ___              &to QWERTY     &kp BKSP        &kp K       &lt SYM H    &comma_morph  &dot_morph     &kp MINUS      &kp SQT
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                 &kp LGUI      &kp DEL       &kp BKSP     &to_nav      SMART_NUM          &lt FN RET     &spc_morph   &smart_shft    &kp TAB       &kp K_CMENU
//                                          ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(sym_layer,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        ___          &kp SQT       &kp LT        &kp GT        &kp DQT      &kp DOT                                                                      &kp AMPS     &kp COLN    &kp LBRC        &kp RBRC       &kp PRCT       ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        ___         &kp EXCL      &kp MINUS     &kp PLUS       &kp EQL      &kp HASH                                                                     &kp PIPE     &kp SEMI    &kp LPAR        &kp RPAR      &kp QMARK       ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮     ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        ___        &kp CARET      &kp FSLH      &kp ASTRK      &kp BSLH      &kp AT         ___           ___                 ___           ___          &kp TILDE    &kp DLLR    &kp LBKT        &kp RBKT       &euro       ___
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                  ___           ___           ___           ___           ___                 ___           ___           ___           ___           ___
//                                          ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(nav_layer,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        ___           ___           ___        &kp LS(TAB)   &swapper        ___                                                                       &kp PG_UP     NAV_BSPC       NAV_UP        NAV_DEL         ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        ___        &kp LGUI      &kp LALT      &kp LCTRL     &kp LSHFT        ___                                                                      &kp PG_DN     NAV_LEFT      NAV_DOWN      NAV_RIGHT        ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮     ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        ___           ___           ___           ___           ___           ___           ___           ___                 ___           ___        &kp INS        &kp TAB       &kp LT        &kp GT          ___           ___
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                  ___           ___           ___           ___           ___                 ___         CANCEL          ___           ___           ___
//                                          ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(fn_layer,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        ___         &kp F12       &kp F7        &kp F8        &kp F9          ___                                                                         ___       &kp C_PREV    &kp C_VOL_UP  &kp C_NEXT    &win_sleep        ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        ___      &hml LGUI F11 &hml LALT F4  &hml LCTRL F5 &hml LSHFT F6      ___                                                                         ___        DSK_PREV      VOL_DOWN       DSK_NEXT        ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮     ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        ___         &kp F10       &kp F1        &kp F2        &kp F3          ___           ___           ___                 ___           ___         PIN_APP       PIN_WIN       DSK_MGR         ___           ___           ___
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                  ___           ___           ___         &kp C_PP    &kp C_MUTE              ___           ___           ___           ___           ___
//                                          ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(num_layer,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        ___           ___           ___           ___           ___           ___                                                                     &kp KP_NUM    &kp KP_N7     &kp KP_N8     &kp KP_N9   &kp KP_MULTIPLY &kp KP_DIVIDE
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        ___           ___           ___           ___           ___           ___                                                                  &kp KP_DOT &hmr RSHFT KP_N4 &hmr RCTRL KP_N5 &hmr RALT KP_N6 &hmr RGUI KP_PLUS &kp KP_MINUS
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮     ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        ___           ___           ___           ___           ___           ___           ___           ___                 ___           ___        &kp KP_N0     &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp EQUAL    &kp KP_ENTER
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                  ___           ___           ___           ___           ___                 ___           ___           ___           ___           ___
//                                          ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(sys_layer,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        ___                                  _BT_SEL_KEYS_                                                                                                ___           ___           ___           ___           ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        ___           ___           ___           ___           ___       &bootloader                                                                 &bootloader       ___           ___           ___           ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮     ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        ___           ___           ___           ___           ___       &sys_reset           ___           ___                 ___           ___           ___           ___           ___           ___           ___           ___
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                  ___           ___           ___           ___           ___                 ___           ___           ___           ___           ___
//                                          ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(mouse_layer,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        ___           ___           ___           ___           ___           ___                                                                         ___         U_WH_D        U_MS_U         U_WH_U         ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        ___           ___           ___           ___           ___           ___                                                                         ___         U_MS_L        U_MS_D         U_MS_R         ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮     ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        ___           ___           ___           ___           ___           ___           ___           ___                 ___           ___           ___           ___           ___           ___           ___           ___
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                  ___           ___           ___           ___           ___               U_BTN2        U_BTN1          ___           ___           ___
//                                          ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(qwerty_layer,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &kp ESC        &kp Q         &kp W         &kp E         &kp R         &kp T                                                                       &kp Y         &kp U         &kp I         &kp O         &kp P        &kp LBKT
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &kp TAB        &kp A         &kp S         &kp D         &kp F         &kp G                                                                       &kp H         &kp J         &kp K         &kp L     &kp SEMICOLON    &kp SQT
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮     ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
       &to 0         &kp Z         &kp X         &kp C         &kp V         &kp B       &kp PG_UP   &kp PAGE_DOWN         &kp HOME      &kp END        &kp N         &kp M       &kp COMMA      &kp DOT       &kp FSLH      &kp AT
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                               &kp LSFT      &kp LCTL       &kp LALT       &kp SPC     &kp ENTER           &kp ENTER     &kp SPC       &kp RALT      &kp RCTL      &kp RSFT
//                                          ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)

/*
ZMK_LAYER(blank,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                                             ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        ___           ___           ___           ___           ___           ___                                                                         ___           ___           ___           ___           ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                                                             ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        ___           ___           ___           ___           ___           ___                                                                         ___           ___           ___           ___           ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮     ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        ___           ___           ___           ___           ___           ___           ___           ___                 ___           ___           ___           ___           ___           ___           ___           ___
//╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤     ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                  ___           ___           ___           ___           ___                 ___           ___           ___           ___           ___
//                                          ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯     ╰─────────────┴─────────────┴─────────────┴─────────────┴─────────────╯
)
*/
/* vim: set ft=c tw=174: */
